# AIML Studio - 系统架构文档

## 系统概述
AIML Studio（AI & Machine Learning Studio） 是一个交互式机器学习算法学习与演示平台，
集算法讲解、代码执行、参数调试与可视化分析于一体，让机器学习模型"可讲、可跑、可见"。

### 项目约束

**本项目不包含以下内容：**

- ❌ **测试代码**：不包含单元测试、集成测试、E2E测试等任何测试代码
- ❌ **代码检查工具**：不使用 pylint、flake8、ESLint 等代码检查工具
- ❌ **代码格式化工具**：不使用 black、prettier 等代码格式化工具
- ❌ **类型检查工具**：不使用 mypy、pyright 等类型检查工具
- ❌ **代码质量工具**：不使用 coverage、sonarqube 等代码质量分析工具
- ❌ **TypeScript**：前端项目不使用 TypeScript，使用纯 JavaScript 开发

**项目专注于**：

- ✅ 核心业务功能实现
- ✅ 代码可读性和可维护性
- ✅ 手动代码审查

**国际化管理规范**：

- 🌐 每个模块创建独立的 `locales/` 目录
- 🌐 包含 `zh-CN.json`（简体中文）和 `en.json`（英文）两个语言文件
- 🌐 每个模块管理自己的国际化资源，避免全局耦合

### 设计风格约束

**UI/UX 设计风格**：

- 🎨 **采用 GPT (ChatGPT) 风格设计**
  - 简洁、现代、极简主义的界面设计
  - 柔和的色彩搭配（灰白色系为主）
  - 圆角设计，柔和的阴影效果
  - 流畅的动画过渡
  - 响应式布局，适配多种设备
  - 深色/浅色主题切换支持

## 技术栈

### 后端技术栈

- **核心框架**：
  - Python 3.10+
  - FastAPI - 现代、高性能的 Web 框架
  - Uvicorn - ASGI 服务器

- **机器学习库**：
  - NumPy - 数值计算基础库
  - Pandas - 数据处理和分析
  - scikit-learn - 经典机器学习算法库
  - PyTorch - 深度学习框架（仅用于神经网络演示，可选）

### 前端技术栈

- **核心框架**：
  - React 18+ - UI 框架
  - JSX - React 组件语法，不使用 TypeScript
  - Vite - 现代化构建工具

- **内容管理**：
  - MDX - Markdown + JSX 混合编写，实现文档和交互组件一体化
  - @mdx-js/react - MDX React 渲染器
  - remark-gfm - GitHub Flavored Markdown 支持
  - rehype-highlight - 代码语法高亮插件

- **UI 组件库**：
  - Tailwind CSS - 原子化 CSS 框架
  - Headless UI - 无样式组件库
  - Lucide React - 图标库

- **状态管理**：
  - React Hooks (useState, useContext) - 内置状态管理即可

- **数据可视化**：
  - Plotly.js - 交互式图表（优先使用）
  - Recharts - React 图表组件（备选）

- **代码高亮**：
  - Prism.js 或 highlight.js - 静态代码展示（只读）

- **其他依赖**：
  - Axios - HTTP 客户端
  - React Router - 路由管理

## 页面布局与交互设计

### 主页布局（Home Page）

AIML Studio 采用**经典的文档导航式布局**，类似于 ChatGPT 的侧边栏设计：

> **设计理念**：渐进式学习 + 交互式体验 + 实战应用导向

```
┌──────────────────────────────────────────────────────────────────┐
│  🎓 AIML Studio                                      🌐 语言     │ Header
├──────────────────┬───────────────────────────────────────────────┤
│                  │                                               │
│  📁 监督学习     │  # 线性回归 Linear Regression                │
│   ├─ 线性回归    │  ⭐⭐☆☆☆ 初级  |  ⏱️ 15分钟                   │
│   ├─ 逻辑回归    │  ──────────────────────────────────────────   │
│   ├─ 决策树      │                                               │
│   └─ 随机森林    │  ## 1️⃣ 算法概览                              │
│                  │  算法简介、应用场景、核心思想...              │
│  📁 无监督学习   │                                               │
│   ├─ K-means     │  ## 2️⃣ 发展历史                              │
│   ├─ DBSCAN      │  1805年高斯提出最小二乘法...                 │
│   └─ PCA         │                                               │
│                  │  ## 3️⃣ 数学原理                              │
│  📁 神经网络     │  损失函数、梯度下降、推导过程...              │
│   ├─ MLP         │                                               │
│   └─ CNN         │  ## 4️⃣ 交互式实验 ⚡                         │
│                  │  ┌────────────────────────────────────────┐  │
│                  │  │ 📊 参数调整面板                        │  │
│  Sidebar         │  │  学习率: [━━━━━○━━━━] 0.01            │  │
│  (240px)         │  │  迭代次数: [━━━━━━━○━━] 1000          │  │
│                  │  │  [▶️ 运行训练] [🔄 重置] [📊 查看代码]  │  │
│                  │  └────────────────────────────────────────┘  │
│                  │  ┌────────────────────────────────────────┐  │
│                  │  │ 📈 可视化结果 (Plotly.js)              │  │
│                  │  │  [散点图] [拟合曲线] [损失函数]        │  │
│                  │  └────────────────────────────────────────┘  │
│                  │  ```python                                    │
│                  │  # 后端实现代码（可折叠）                    │
│                  │  from sklearn.linear_model import ...        │
│                  │  ```                                          │
│                  │                                               │
│                  │  ## 5️⃣ 实际应用                              │
│                  │  房价预测、销售预测、趋势分析...              │
│                  │                                               │
│                  │  Content Area (MDX 渲染)                      │
│                  │  (flex-1)                                     │
└──────────────────┴───────────────────────────────────────────────┘
```

## 目录结构

### 前端目录结构

```
frontend/
├── public/
├── src/
│   ├── main.jsx
│   ├── App.jsx
│   │
│   ├── common/
│   │   ├── index.css
│   │   ├── i18n.js
│   │   └── modules/
│   │       ├── Components/
│   │       │   ├── locales/
│   │       │   ├── Header.jsx
│   │       │   ├── Sidebar.jsx
│   │       │   ├── MainLayout.jsx
│   │       │   ├── index.js
│   │       │   ├── route.js
│   │       │   └── store.js
│   │       │
│   │       ├── MDX/
│   │       │   ├── locales/
│   │       │   ├── LocalizedMDX.jsx      # 国际化 MDX 加载器
│   │       │   ├── MDXComponents.jsx     # MDX 自定义组件
│   │       │   ├── index.js
│   │       │   ├── route.js
│   │       │   └── store.js
│   │       │
│   │       ├── Logger/
│   │       │   ├── LoggerComponents.jsx
│   │       │   ├── LogViewer.jsx
│   │       │   ├── index.js
│   │       │   ├── route.js
│   │       │   └── store.js
│   │       │
│   │       ├── Exceptions/
│   │       │   ├── ExceptionComponents.jsx
│   │       │   ├── ExceptionMonitor.jsx
│   │       │   ├── index.js
│   │       │   ├── route.js
│   │       │   └── store.js
│   │       │
│   │       └── index.js
│   │
│   └── modules/
│       └── Algorithms/
│           ├── Supervised/
│           │   ├── LinearRegression/
│           │   │   ├── locales/
│           │   │   ├── index.zh-CN.mdx
│           │   │   ├── index.en.mdx
│           │   │   ├── index.js
│           │   │   ├── route.js
│           │   │   └── store.js
│           │   │
│           │   ├── LogisticRegression/
│           │   │   ├── locales/
│           │   │   ├── index.zh-CN.mdx
│           │   │   ├── index.en.mdx
│           │   │   ├── index.js
│           │   │   ├── route.js
│           │   │   └── store.js
│           │   │
│           │   ├── DecisionTree/
│           │   │   ├── locales/
│           │   │   ├── index.zh-CN.mdx
│           │   │   ├── index.en.mdx
│           │   │   ├── index.js
│           │   │   ├── route.js
│           │   │   └── store.js
│           │   │
│           │   └── RandomForest/
│           │       ├── locales/
│           │       ├── index.zh-CN.mdx
│           │       ├── index.en.mdx
│           │       ├── index.js
│           │       ├── route.js
│           │       └── store.js
│           │
│           ├── Unsupervised/
│           │   ├── KMeans/
│           │   │   ├── index.zh-CN.mdx
│           │   │   ├── index.en.mdx
│           │   │   ├── index.js
│           │   │   ├── route.js
│           │   │   └── store.js
│           │   │
│           │   ├── DBSCAN/
│           │   │   ├── index.js
│           │   │   ├── route.js
│           │   │   └── store.js
│           │   │
│           │   └── PCA/
│           │       ├── index.js
│           │       ├── route.js
│           │       └── store.js
│           │
│           └── NeuralNetworks/
│               ├── MLP/
│               │   ├── index.js
│               │   ├── route.js
│               │   └── store.js
│               │
│               └── CNN/
│                   ├── index.js
│                   ├── route.js
│                   └── store.js
│
├── .env.local
├── .gitignore
├── index.html
├── vite.config.js
├── tailwind.config.js
├── postcss.config.js
└── package.json

```

### 后端目录结构

```
backend/
├── src/
│   ├── common/
│   │   └── modules/           # 🔧 通用模块（基础设施）
│   │       ├── config/        # 配置模块
│   │       ├── exceptions/    # 异常处理模块
│   │       ├── logger/        # 日志模块
│   │       └── utils/         # 工具模块
│   │
│   ├── modules/               # 📦 业务模块
│   │   └── algorithms/        # 算法业务模块（核心）
│   │       ├── supervised/            # 监督学习算法
│   │       │   ├── linear_regression/     # 线性回归
│   │       │   ├── logistic_regression/   # 逻辑回归
│   │       │   ├── decision_tree/         # 决策树
│   │       │   └── random_forest/         # 随机森林
│   │       │
│   │       ├── unsupervised/          # 无监督学习算法
│   │       │   ├── kmeans/                # K均值聚类
│   │       │   ├── dbscan/                # DBSCAN聚类
│   │       │   └── pca/                   # 主成分分析
│   │       │
│   │       └── neural_networks/       # 神经网络算法
│   │           ├── mlp/                   # 多层感知机
│   │           └── cnn/                   # 卷积神经网络
│   │
│   └── main.py                # FastAPI 应用入口
│
├── requirements.txt           # Python 依赖管理
├── .env.local              # 环境变量配置
├── .gitignore                # Git 忽略文件
└── README.md                 # 后端文档
```

## 核心交互流程

### 用户操作算法参数的数据流

1. 用户在 MDX 页面调整参数（滑块/输入框）
2. 前端通过 Axios 发送 POST 请求到后端 API（如 `/api/algorithms/linear-regression/train`）
3. 后端执行算法，返回结果（模型参数、评估指标、可视化数据）
4. 前端使用 Plotly.js 渲染可视化图表

### API 设计约定

- 端点格式：`/api/algorithms/{category}/{algorithm_name}/{action}`
- 请求体：JSON 格式，包含参数和数据
- 响应体：JSON 格式，包含结果和元数据

## 命名规范

### 后端命名规范（Python）

#### 文件和目录命名

- **目录名**：全小写，多个单词用下划线分隔（`snake_case`）
- **Python文件名**：全小写，多个单词用下划线分隔（`snake_case`）

#### 类命名

- **类名**：大驼峰命名（`PascalCase`），每个单词首字母大写

#### 函数和变量命名

- **函数名**：全小写，多个单词用下划线分隔（`snake_case`）
- **变量名**：全小写，多个单词用下划线分隔（`snake_case`）
- **常量名**：全大写，多个单词用下划线分隔（`UPPER_SNAKE_CASE`）

#### 私有成员命名

- **私有函数/方法**：前缀单下划线
- **强私有成员**：前缀双下划线（触发名称改编）

#### Pydantic Schema 命名

- **Schema类**：大驼峰 + 后缀说明用途
- **常用后缀**：`Create`, `Update`, `Response`, `InDB`

### 前端命名规范（React/JavaScript）

#### 文件和目录命名

- **目录名**：大驼峰命名（`PascalCase`）
- **特殊目录**：`public/`, `assets/`（全小写）
- **React 组件文件名**：大驼峰命名（`PascalCase`）
- **页面组件**：`index.jsx`（模块入口）
- **JavaScript 工具文件名**：小驼峰命名（`camelCase`）
- **配置文件名**：小驼峰或短横线命名
- **样式文件名**：小写或与组件同名

#### 组件命名

- **React 组件**：大驼峰命名（`PascalCase`），多单词组合
- **组件前缀规范**：
  - 布局组件：`Layout` 后缀
  - 基础组件：无前缀
  - 业务组件：功能描述
  - HOC 组件：`with` 前缀

#### 函数和变量命名

- **函数名**：小驼峰命名（`camelCase`）
- **事件处理函数**：`handle` 前缀
- **变量名**：小驼峰命名（`camelCase`）
- **常量名**：全大写，多个单词用下划线分隔（`UPPER_SNAKE_CASE`）
- **布尔变量**：使用 `is`、`has`、`should` 前缀

#### React Hooks 命名

- **自定义 Hook**：使用 `use` 前缀，小驼峰命名
- **useState 变量**：小驼峰命名，配对命名
- **useRef 变量**：小驼峰命名，通常使用 `Ref` 后缀
- **useContext**：大驼峰命名，通常使用 `Context` 后缀

#### Context 命名

- **Context 文件名**：大驼峰 + `Context` 后缀
- **Provider 组件**：大驼峰 + `Provider` 后缀
- **Context 值命名**：小驼峰命名

#### 路由命名

- **路由文件名**：小驼峰或全小写
- **路由 path**：全小写，使用短横线分隔（`kebab-case`）
- **路由组件懒加载**：使用 `React.lazy` + 大驼峰命名

#### Props 命名

- **Props 命名**：小驼峰命名（`camelCase`）
- **事件 Props**：使用 `on` 前缀
- **回调 Props**：使用 `handle` 或 `on` 前缀
- **布尔 Props**：使用 `is`、`has`、`should` 前缀

#### 样式命名（Tailwind CSS / CSS Modules）

- **Tailwind 类名**：使用官方工具类，短横线分隔
- **自定义 CSS 类名**：全小写，使用短横线分隔（`kebab-case`），BEM 命名规范
- **CSS Modules 类名**：小驼峰命名
- **CSS 变量**：使用短横线分隔，加 `--` 前缀

#### MDX 文件命名

- **MDX 内容文件**：全小写，使用短横线分隔或 `content.mdx`
- **MDX 组件导出**：大驼峰命名

#### API 和服务命名

- **API 文件名**：小驼峰命名，使用 `api` 或 `service` 后缀
- **API 函数名**：小驼峰命名，使用动词开头
- **API 端点常量**：全大写，使用下划线分隔

#### 工具函数命名

- **工具文件名**：小驼峰命名，复数形式
- **工具函数名**：小驼峰命名，动词开头

#### TypeScript 类型命名（如果使用）

- **Interface**：大驼峰命名，使用 `I` 前缀（可选）
- **Type Alias**：大驼峰命名
- **Enum**：大驼峰命名
